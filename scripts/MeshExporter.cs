using System;
using System.Collections.Generic;
using System.Linq;
using Godot;

public class MeshExporter
{
    private static void WriteString(string s, ref List<byte> data)
    {
        data.AddRange(s.ToAsciiBuffer());
    }

    private static void WriteInt(int i, ref List<byte> data)
    {
        WriteString(i.ToString(), ref data);
    }

    public static byte[] ExportObj(ArrayMesh mesh)
    {
        List<byte> data = new List<byte>();

        WriteString("# Generated by the pixel-graphite editor\n\n", ref data);

        int v_offset = 1;
        for (int i = 0; i < mesh.GetSurfaceCount(); i++)
        {
            Godot.Collections.Array arrays = mesh.SurfaceGetArrays(i);
            Vector3[] vertices = arrays[(int)ArrayMesh.ArrayType.Vertex].AsVector3Array();
            Vector3[] normals = arrays[(int)ArrayMesh.ArrayType.Normal].AsVector3Array();
            int[] indices = arrays[(int)ArrayMesh.ArrayType.Index].AsInt32Array();

            for (int j = 0; j < vertices.Length; j++)
                WriteString("v " + vertices[j].X.ToString("n3") + " " + vertices[j].Y.ToString("n2") + " " + vertices[j].Z.ToString("n2")
                        + "\nvn " + normals[j].X.ToString("n3") + " " + normals[j].Y.ToString("n2") + " " + normals[j].Z.ToString("n2") + "\n", ref data);

            WriteString("\n", ref data);
            for (int j = 0; j < indices.Length - 2; j += 3)
                WriteString("f " + (indices[j + 2] + v_offset) + "//" + (indices[j + 2] + v_offset) + " " + (indices[j + 1] + v_offset) + "//" + (indices[j + 1] + v_offset) + " " + (indices[j] + v_offset) + "//" + (indices[j] + v_offset) + "\n", ref data);
            WriteString("\n\n", ref data);

            v_offset += mesh.SurfaceGetArrayLen(i);
        }

        return data.ToArray();
    }
}